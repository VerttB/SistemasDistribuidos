# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chat_pb2 as chat__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChatServiceStub(object):
    """--------- Serviços ---------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGroup = channel.unary_unary(
                '/chat_system.ChatService/CreateGroup',
                request_serializer=chat__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=chat__pb2.CreateGroupResponse.FromString,
                _registered_method=True)
        self.ListGroups = channel.unary_unary(
                '/chat_system.ChatService/ListGroups',
                request_serializer=chat__pb2.ListGroupsRequest.SerializeToString,
                response_deserializer=chat__pb2.ListGroupsResponse.FromString,
                _registered_method=True)
        self.EnterGroup = channel.unary_unary(
                '/chat_system.ChatService/EnterGroup',
                request_serializer=chat__pb2.EnterGroupRequest.SerializeToString,
                response_deserializer=chat__pb2.EnterLeaveGroupResponse.FromString,
                _registered_method=True)
        self.LeaveGroup = channel.unary_unary(
                '/chat_system.ChatService/LeaveGroup',
                request_serializer=chat__pb2.LeaveGroupRequest.SerializeToString,
                response_deserializer=chat__pb2.EnterLeaveGroupResponse.FromString,
                _registered_method=True)
        self.GetGroupParticipants = channel.unary_unary(
                '/chat_system.ChatService/GetGroupParticipants',
                request_serializer=chat__pb2.GetGroupParticipantsRequest.SerializeToString,
                response_deserializer=chat__pb2.GetGroupParticipantsResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/chat_system.ChatService/SendMessage',
                request_serializer=chat__pb2.ChatMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SubscribeToGroup = channel.unary_stream(
                '/chat_system.ChatService/SubscribeToGroup',
                request_serializer=chat__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=chat__pb2.ChatMessage.FromString,
                _registered_method=True)


class ChatServiceServicer(object):
    """--------- Serviços ---------

    """

    def CreateGroup(self, request, context):
        """Servidor: gerenciamento de grupos
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnterGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupParticipants(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Cliente: enviar e receber mensagens (streaming)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=chat__pb2.CreateGroupRequest.FromString,
                    response_serializer=chat__pb2.CreateGroupResponse.SerializeToString,
            ),
            'ListGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroups,
                    request_deserializer=chat__pb2.ListGroupsRequest.FromString,
                    response_serializer=chat__pb2.ListGroupsResponse.SerializeToString,
            ),
            'EnterGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.EnterGroup,
                    request_deserializer=chat__pb2.EnterGroupRequest.FromString,
                    response_serializer=chat__pb2.EnterLeaveGroupResponse.SerializeToString,
            ),
            'LeaveGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveGroup,
                    request_deserializer=chat__pb2.LeaveGroupRequest.FromString,
                    response_serializer=chat__pb2.EnterLeaveGroupResponse.SerializeToString,
            ),
            'GetGroupParticipants': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupParticipants,
                    request_deserializer=chat__pb2.GetGroupParticipantsRequest.FromString,
                    response_serializer=chat__pb2.GetGroupParticipantsResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.ChatMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SubscribeToGroup': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToGroup,
                    request_deserializer=chat__pb2.SubscriptionRequest.FromString,
                    response_serializer=chat__pb2.ChatMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat_system.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat_system.ChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """--------- Serviços ---------

    """

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat_system.ChatService/CreateGroup',
            chat__pb2.CreateGroupRequest.SerializeToString,
            chat__pb2.CreateGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat_system.ChatService/ListGroups',
            chat__pb2.ListGroupsRequest.SerializeToString,
            chat__pb2.ListGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnterGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat_system.ChatService/EnterGroup',
            chat__pb2.EnterGroupRequest.SerializeToString,
            chat__pb2.EnterLeaveGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LeaveGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat_system.ChatService/LeaveGroup',
            chat__pb2.LeaveGroupRequest.SerializeToString,
            chat__pb2.EnterLeaveGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroupParticipants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat_system.ChatService/GetGroupParticipants',
            chat__pb2.GetGroupParticipantsRequest.SerializeToString,
            chat__pb2.GetGroupParticipantsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat_system.ChatService/SendMessage',
            chat__pb2.ChatMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeToGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chat_system.ChatService/SubscribeToGroup',
            chat__pb2.SubscriptionRequest.SerializeToString,
            chat__pb2.ChatMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
