syntax = "proto3";

package chat_system;

import "google/protobuf/empty.proto";

// --------- Mensagens do Servidor ---------

message CreateGroupRequest {
  string group_id = 1;
  string password = 2; // opcional
}

message CreateGroupResponse {
  bool success = 1;
  string message = 2;
}

message ListGroupsRequest {}

message ListGroupsResponse {
  repeated string group_ids = 1;
}

message EnterGroupRequest {
  string group_id = 1;
  string password = 2;
  string user_id = 3;
}

message LeaveGroupRequest {
  string group_id = 1;
  string user_id = 2;
}

message EnterLeaveGroupResponse {
  bool success = 1;
  string message = 2;
}

message GetGroupParticipantsRequest {
  string group_id = 1;
}

message GetGroupParticipantsResponse {
  repeated string user_ids = 1;
}

// --------- Mensagens do Cliente ---------

message VectorClock {
  repeated int32 clock = 1;
}

message ChatMessage {
  string user_id = 1;
  string text = 2;
  VectorClock vector_clock = 3;
  string group_id = 4;
}

message SubscriptionRequest {
  string user_id = 1;
  int32 client_process_id = 2;
  string group_id = 3;
}

// --------- Servi√ßos ---------

service ChatService {
  // Servidor: gerenciamento de grupos
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
  rpc EnterGroup(EnterGroupRequest) returns (EnterLeaveGroupResponse);
  rpc LeaveGroup(LeaveGroupRequest) returns (EnterLeaveGroupResponse);
  rpc GetGroupParticipants(GetGroupParticipantsRequest) returns (GetGroupParticipantsResponse);

  // Cliente: enviar e receber mensagens (streaming)
  rpc SendMessage(ChatMessage) returns (google.protobuf.Empty);
  rpc SubscribeToGroup(SubscriptionRequest) returns (stream ChatMessage);
}
